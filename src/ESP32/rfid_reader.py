from time import sleep_ms
from machine import Pin, SPI
from mfrc522 import MFRC522
from acceptor import Acceptor

from ws_client import ws_client  # Importer le client WebSocket

class RFID:
    def __init__(self):
        # SPI config pour MFRC522
        self.sck = Pin(18, Pin.OUT)
        self.mosi = Pin(23, Pin.OUT)
        self.miso = Pin(19, Pin.OUT)
        self.spi = SPI(baudrate=1000000, polarity=0, phase=0,
                       sck=self.sck, mosi=self.mosi, miso=self.miso)
        self.sda = Pin(5, Pin.OUT)

        # UID autoris√©
        self.allowed_uid = "33A7830E"

        # Initialisation de l'accepteur de long scan
        self.long_scan = Acceptor(
            patterns=[[True] * 10],  # 10 ticks = 5s
            accepted_callback=self.on_long_scan,
            refused_callback=self.on_scan_refused
        )

        # √âtat pour savoir si un badge a √©t√© ins√©r√© au moins une fois
        self.badge_inserted = False

        # Compteur pour le nombre de ticks sans badge
        self.badge_removed_ticks = 0

    def on_long_scan(self):
        """Callback appel√© lorsqu'un long scan est valide"""
        print("‚úÖ Long scan VALIDE avec badge autoris√© !")
        # Envoyer le message de long scan apr√®s la validation
        ws_client.send_long_scan()

    def on_scan_refused(self, seq):
        """Callback appel√© si le long scan √©choue"""
        print("‚ùå Long scan √©chou√©. S√©quence:", seq)

    def read(self):
        """Lecture du badge RFID"""
        rdr = MFRC522(self.spi, self.sda)
        uid = None
        (stat, tag_type) = rdr.request(rdr.REQIDL)
        if stat == rdr.OK:
            (stat, raw_uid) = rdr.anticoll()
            if stat == rdr.OK:
                uid = "%02X%02X%02X%02X" % (raw_uid[0], raw_uid[1], raw_uid[2], raw_uid[3])
        return uid

    def listen(self):
        """√âcoute continue des badges RFID"""
        current_uid = self.read()

        if current_uid:
            print(f"üîç Badge d√©tect√©: {current_uid}")
            if current_uid == self.allowed_uid:
                print("‚úÖ Badge autoris√© d√©tect√©")
                if not self.badge_inserted:
                    # Premier scan du badge, on marque qu'il a √©t√© ins√©r√©
                    self.badge_inserted = True
                    print("‚úÖ Badge ins√©r√© pour la premi√®re fois.")
                
                # R√©initialiser le compteur de ticks si le badge est ins√©r√©
                self.badge_removed_ticks = 0
                self.long_scan.update(True)  # Si le badge est autoris√©, tenter un long scan
            else:
                print("‚õîÔ∏è Mauvais badge, refus√©.")
                self.long_scan.update(False)  # Si le badge est incorrect, refuse le long scan
        else:
            print("‚ùå Aucun badge d√©tect√©")
            # Si aucun badge n'est d√©tect√© et que le badge a √©t√© ins√©r√© au moins une fois
            if self.badge_inserted:
                # Incr√©menter le compteur de ticks pour d√©tecter l'absence du badge
                self.badge_removed_ticks += 1
                if self.badge_removed_ticks >= 10:  # Si 10 ticks (5 secondes) se sont √©coul√©s
                    print("‚ùå Badge retir√© apr√®s 5 secondes.")
                    self.send_badge_removed()
                    self.badge_removed_ticks = 0  # R√©initialiser le compteur de ticks
            self.long_scan.update(False)  # Aucun badge, refuse le long scan

    def send_badge_removed(self):
        """Envoie un message indiquant que le badge a √©t√© retir√©"""
        print("‚ùå Badge retir√©. Envoi du message BADGE_REMOVED.")
        ws_client.send_badge_removed()

